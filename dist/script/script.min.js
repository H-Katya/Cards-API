import Visit from"./modul/Visit.js";import VisitDentist from"./modul/VisitDentist.js";import VisitCardiologist from"./modul/VisitCardiologist.js";import VisitTherapist from"./modul/VisitTherapist.js";import fetchPost from"./async methods/POST.js";import fetchGetCards from"./async methods/fetchGetCards.js";import fetchGetCard from"./async methods/fetchGetCard.js";import fetchDelete from"./async methods/DELETE.js";import fetchPut from"./async methods/PUT.js";const loginBtn=document.querySelector('[data-bs-target="#loginModal"]'),visitBtn=document.querySelector('[data-bs-target="#visitModal"]'),loginModal=document.querySelector("#loginModal"),loginModalObj=new bootstrap.Modal(document.getElementById("loginModal"),{keyboard:!1}),loginForm=document.querySelector("#login-form"),submitLoginForm=document.querySelector(".login-submit");loginModal.addEventListener("hidden.bs.modal",t=>{loginForm.email.value=null,loginForm.pass.value=null});const getToken=async(t,e)=>{const o=await fetch("https://ajax.test-danit.com/api/v2/cards/login",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({email:t,password:e})});if(200===o.status){const t=await o.text();localStorage.setItem("token",t),loginForm.email.value=null,loginForm.pass.value=null,loginBtn.style.display="none",visitBtn.style.display="block",alert("Great success"),loginModalObj.hide()}else alert("Email or password incorrect")};submitLoginForm.addEventListener("click",()=>{const t=loginForm.email.value,e=loginForm.pass.value;getToken(t,e)});const cardList=document.querySelector(".cardList"),noCards=document.querySelector("#no-cards");let token=localStorage.getItem("token");const creatCard=async t=>{let e=null;"dentist"===t.doctor?e=new VisitDentist(t):"therapist"===t.doctor?e=new VisitTherapist(t):"cardiologist"===t.doctor&&(e=new VisitCardiologist(t)),null!==e&&cardList.insertAdjacentElement("afterbegin",e.creatNode())},recoverySession=async()=>{let t=Array.prototype.slice.call(await fetchGetCards(token));0!==t.length?(noCards.classList.add("d-none"),t.forEach(t=>{creatCard(t)})):noCards.classList.remove("d-none")};window.addEventListener("DOMContentLoaded",()=>{null!==localStorage.getItem("token")&&(loginBtn.style.display="none",visitBtn.style.display="block",recoverySession())});const visitModal=document.querySelector("#visitModal"),visitModalObj=new bootstrap.Modal(document.getElementById("visitModal"),{keyboard:!1}),visitForm=document.querySelector("#form-visit"),filterForm=document.querySelector("#form-filter"),doctorType=document.querySelector("#visitDoctor"),editButton=document.querySelector("#visit-edit"),submitButton=document.querySelector("#visit-submit");visitForm.addEventListener("submit",async t=>{if(t.preventDefault(),t.stopPropagation(),console.log(visitForm.checkValidity()),visitForm.classList.add("was-validated"),visitForm.checkValidity()){const t=new FormData(visitForm);let e={};for(const o of t.entries())""!==o[1]&&(e[o[0]]=o[1]);creatCard(await fetchPost(e,token),e.doctor),visitModalObj.hide()}0!==cardList.children.length&&noCards.classList.add("d-none")}),visitModal.addEventListener("hidden.bs.modal",()=>{(new Visit).hideInputs(),visitForm.reset(),visitForm.classList.contains("was-validated")&&visitForm.classList.remove("was-validated"),editButton.classList.contains("d-none")||(editButton.classList.add("d-none"),submitButton.classList.remove("d-none"))}),editButton.addEventListener("click",async()=>{if(event.preventDefault(),event.stopPropagation(),console.log(visitForm.checkValidity()),visitForm.classList.add("was-validated"),visitForm.checkValidity()){const t=new FormData(visitForm);let e={};for(const o of t.entries())""!==o[1]&&(e[o[0]]=o[1]);let o=visitForm.getAttribute("data-id");document.querySelector(`[data-card="${o}"]`).parentElement.remove(),e.id=o,console.log(e),creatCard(await fetchPut(e,token),e.doctor),visitModalObj.hide()}});const changeDoctor=t=>{const e=new Visit;e.hideInputs(),e.showInputs(t.target.value)};doctorType.addEventListener("change",changeDoctor),cardList.addEventListener("click",t=>{if("btn-close btn-remove"!=t.target.className)return;let e=t.target.closest(".card").getAttribute("data-card");fetchDelete(e,token),t.target.closest("li").remove(),0===cardList.children.length&&noCards.classList.remove("d-none")});const editCard=async t=>{let e=null;"dentist"===t.doctor?e=new VisitDentist(t,visitForm):"therapist"===t.doctor?e=new VisitTherapist(t,visitForm):"cardiologist"===t.doctor&&(e=new VisitCardiologist(t,visitForm)),null!==e&&e.fillForm()};cardList.addEventListener("click",async t=>{if("btn btn-outline-warning btn-sm"!=t.target.className)return;let e=t.target.closest(".card").getAttribute("data-card"),o=await fetchGetCard(token,e);editCard(o)}),window.addEventListener("beforeunload",()=>{visitForm.reset(),filterForm.reset()});const search=document.querySelector("#main-search"),cleanValue=document.querySelector("#main-clean"),status=document.querySelector("#main-status"),urgency=document.querySelector("#main-urgency"),filter=()=>{let t=search.value.toLowerCase(),e=status.value,o=urgency.value;document.querySelectorAll(".cardList > li .card").forEach(i=>{i.parentElement.classList.contains("d-none")&&i.parentElement.classList.remove("d-none");let s=i.getAttribute("data-name"),a=i.getAttribute("data-status"),n=i.getAttribute("data-urgency");-1===s.indexOf(t)&&i.parentElement.classList.add("d-none"),console.log(e,a),""!==e&&a!==e&&i.parentElement.classList.add("d-none"),""!==o&&n!==o&&i.parentElement.classList.add("d-none")})};search.addEventListener("input",filter),cleanValue.addEventListener("click",()=>{filterForm.reset(),filter()}),status.addEventListener("change",filter),urgency.addEventListener("change",filter);